//MyRDAG_node.cpp

#include "MyRDAG_node.h"
#include <assert.h>

MyRDAG_node::MyRDAG_node() :
    left_range{0}, right_range{0}, weight{0}
    , l_child{NULL}, r_child{NULL} 
	, l_parent{NULL}, r_parent{NULL}
    , ref{0}, leaf{false}   {

}

MyRDAG_node::MyRDAG_node(int l, int r, bool w) :
	left_range{l}, right_range{r}, weight{w}
    , l_child{NULL}, r_child{NULL} 
	, l_parent{NULL}, r_parent{NULL}
	, ref{0}, leaf{false}  {

}

MyRDAG_node::MyRDAG_node(int l, int r, bool w, 
		                 MyRDAG_node* l_pa, MyRDAG_node* r_pa, node_ref* refer) :
	 left_range{l}, right_range{r}, weight{w}
	 , l_child{NULL}, r_child{NULL}, l_parent{l_pa}, r_parent{r_pa}{
	
	this->ref = refer;
    if(r - l <= 0 ){
		weight = false;
		leaf = true;
	}
	else
		leaf = false;
}




/*************************************************************************************************************
 *
 *************************************************************************************************************/
void MyRDAG_node::build(){
  if(right_range - left_range <= 0){
    leaf = true;
	return;
  }
  cout << "I am not leaf" << endl;
  cout << ref->A1 << endl;
  cout << ref->A2 << endl;
  vector<int> a1_top2 = ref->A1->getTopkPos(left_range, right_range, 2);
  vector<int> a2_top2 = ref->A2->getTopkPos(left_range, right_range, 2);
  cout << &a1_top2 << ", " << ref->A1 << endl;
  cout << &a2_top2 << ", " << ref->A2 << endl;
  int y1, y2;
  if(a1_top2[0] > a2_top2[0]){
	  y1 = a1_top2[0];
	  if(a1_top2[1] > a2_top2[0]){
		  y2 = a1_top2[1];
	  }
	  else{
		  y2 = a2_top2[0];
	  }
  }
  else{
      y1 = a2_top2[0];
	  if(a1_top2[0] < a2_top2[1]){
		  y2 = a2_top2[1];
	  }
	  else{
          y2 = a1_top2[0];
	  }
  }
  int temp = y2;
  if(y1 > y2){
	  y2 = y1;
	  y1 = temp;
  }

  bool lw, rw;
  lw = rw = false;
  if(y1 == y2){
    if(left_range < (y2 - 1) )
		lw = true;
	if(right_range > (y1 + 1) )
		rw = true;
	else{
	  lw = rw = false;	
	}
  }
  else{
    lw = rw = false;
  }

  cout << "  This Node Address" << this << endl;
  /**Checking duplicate node and building left child**/
  if(l_parent && l_parent->l_child && l_parent->l_child->r_child){
	MyRDAG_node* compare = l_parent->l_child->r_child;
    int myLeft = compare->left_range;
	int myRight =  compare->right_range;
	if(myLeft == left_range && myRight == (y2 - 1) ){
		l_child = compare;
		l_child->r_parent = this;
		cout << "Already there" << endl;
	}
	else{
		l_child = new MyRDAG_node(left_range, y2 - 1, lw, NULL, this, this->ref);
		cout << "  This node's (left, right) range: " << left_range << ", " << right_range << endl;
		cout << "left_child build: " << l_child << endl;
		l_child->build();
		cout << "left_child build return" << endl;
	}
  }
  else{
    l_child = new MyRDAG_node(left_range, y2 - 1, lw, NULL, this, this->ref);
	cout << "  This node's (left, right) range: " << left_range << ", " << right_range << endl;
	cout << "left_child build: "<< l_child << endl;
    l_child->build();
	cout << "left_child build return" << endl;
  }
  cout << "left gen end" << endl;
  r_child = new MyRDAG_node(y1 + 1, right_range, rw, this, NULL, this->ref);
  cout << "  This node's (left, right) range: " << left_range << ", " << right_range << endl;
  cout << "          right child build: "<< r_child << endl;
  r_child->build();

  cout << "right gen end" << endl;
  this->weight = this->check_real_weight();
  int intW = -1;
  if(this->weight)
	  intW = 2;
  else 
	  intW = 1;

  cout << this << " node's real weight: " << intW << endl;
  this->total_weight = this->weight ? 2 : 1 ;
  if(l_child)
	  this->total_weight += l_child->total_weight;
  if(r_child)
	  this->total_weight += r_child->total_weight;
}

/*************************************************************************************************************
 *vector<int>* MyRDAG_node::top2Q
 *
 * param: int x1, int y1, int x2, int y2
 *************************************************************************************************************/
vector<int>* MyRDAG_node::top2Q(int x1, int y1, int x2, int y2){
  int a = (y1 < y2) ? y1 : y2;
  int b = (y1 < y2) ? y2 : y1;
  int top = -1;
  int top2 = -1;
  FourTopk_second_oned* A1 = ref->A1; 
  FourTopk_second_oned* A2 = ref->A2;
  vector<int>* list1 = ref->list1;
  vector<int>* list2 = ref->list2;

  vector<int>* cand = new vector<int>();
  vector<int>* cand2 = new vector<int>();
  bool isEnd = false;
  if(a <= left_range && right_range <= b){
	  isEnd = true;
  }
  else if(a <= left_range && b < right_range){
     if(l_child){
		 return l_child->top2Q(x1, y1, x2, y2);
	 }
	 else{
		 if(cand2) delete cand2;
		 return cand;
	 }
  }
  else if(left_range < a && right_range <= b){
    if(r_child){
        return r_child->top2Q(x1, y1, x2, y2);
	}
	else{
		if(cand2) delete cand2;
		return cand;
	}
  }
  else{
    if(l_child){
		cand = l_child->top2Q(x1, y1, x2, y2);
	}
	if(r_child){
		cand2 = r_child->top2Q(x1, y1, x2, y2);
	}

	if(!cand->empty() && cand2->empty()){
		if(cand2) delete cand2;
        return cand;
	}
	else if(cand->empty() && !cand2->empty()){
		if(cand2) delete cand2;
		return cand2;
	}
	else if(cand->empty() && cand2->empty()){
		if(cand2) delete cand2;
		return cand;
	}
	else{
		vector<int>* temp = new vector<int>();
		vector<int>* listA1 = (*cand)[0] == 0 ? list1 : list2;
		vector<int>* listB1 = (*cand2)[0] == 0 ? list1 : list2;
		vector<int>* listA2 = (*cand)[2] == 0 ? list1 : list2;
		vector<int>* listB2 = (*cand2)[2] == 0 ? list1 : list2;

		if( (*listA1)[(*cand)[1]] < (*listB1)[(*cand2)[1]]){
			temp->push_back( (*cand2)[0] );
			temp->push_back( (*cand2)[1] );
			if( (*listA1)[(*cand)[1]] <  (*listB2)[(*cand2)[3]]){
				temp->push_back( (*cand2)[2] );
				temp->push_back( (*cand2)[3]);
			}
			else{
				temp->push_back( (*cand)[0] );
				temp->push_back( (*cand)[1]);
			}
		}
		else{
			temp->push_back( (*cand)[0] );
            temp->push_back( (*cand)[1]);
			if( (*listA2)[(*cand)[3]] >  (*listB1)[(*cand2)[1]]){
				temp->push_back( (*cand)[2] );
				temp->push_back( (*cand)[3]);
			}
			else{
				temp->push_back( (*cand2)[0] );
				temp->push_back( (*cand2)[1]);
			}
		}
		if(cand) delete cand;
		if(cand2) delete cand2;
		return temp;
	}

  }//depth-1 if end
  if(isEnd){
	if(x1 != x2){
		 vector<int>* temp = new vector<int>();
         *cand = A1->getTopkPos(left_range, right_range, 2);
		 *cand2 = A2->getTopkPos(left_range, right_range, 2);
		 int rowNum = -1;
		 int rowNum2 = -1;
		 if( (*list1)[(*cand)[0]] < (*list2)[(*cand2)[0]] ){
			 top = (*cand2)[0];
			 rowNum = 1;
			 if( (*list1)[(*cand)[0]] < (*list2)[(*cand2)[1]]){
				 top2 = (*cand2)[1];
				 rowNum2 = 1;
			 }
			 else{
                 top2 = (*cand)[0];
				 rowNum2 = 0;
			 }
		 }
		 else{
		    top = (*cand)[0];
			rowNum = 0;
			if( (*list1)[(*cand)[1]] > (*list2)[(*cand2)[0]] ){
				top2 = (*cand)[1];
				rowNum2 = 0;
			}
			else{
				top2 = (*cand2)[0];
				rowNum2 = 1;
			}
		 }
		 temp->push_back(rowNum); temp->push_back(top);
		 temp->push_back(rowNum2); temp->push_back(top2);

		 if(cand) delete cand;
		 if(cand2) delete cand2;
		 return temp;
	}
	else{
		vector<int>* temp = new vector<int>();
		if(x1 == 0){
			*cand = A1->getTopkPos(left_range, right_range, 2);
			temp->push_back(0); temp->push_back( (*cand)[0] );
			temp->push_back(0); temp->push_back( (*cand)[1] );
		}
		else if(x1 == 1){
			*cand = A2->getTopkPos(left_range, right_range, 2);
			temp->push_back(1); temp->push_back( (*cand)[0] );
			temp->push_back(1); temp->push_back( (*cand)[1] );
		}

		if(cand2) delete cand2; 
		if(cand) delete cand;
		return temp;
	}
  }
  else{ 
	  if(cand2) delete cand2;
	  return cand;

  }
}

bool MyRDAG_node::check_real_weight(){
	return check_real_weight_left() && check_real_weight_right();
}

bool MyRDAG_node::check_real_weight_left(){
  if(!l_parent){
	cerr << "no left parent" << endl;
    return false;
  }
  else if(l_parent->left_range == l_parent->right_range &&
		  l_parent->right_range > this->left_range){
    return true;
  }
  else{
	return false;
  }
}

bool MyRDAG_node::check_real_weight_right(){
  if(!r_parent){
	  cerr << "no right parent" << endl;
	  return false;
  }
  else if(r_parent->left_range == r_parent->right_range &&
		  r_parent->left_range < this->right_range){
	  return true;
  }
  else{
      return false;
  }
}

MyRDAG_node* MyRDAG_node::get_left_child(){
  return l_child;
}

MyRDAG_node* MyRDAG_node::get_right_child(){
  return r_child;
}

void MyRDAG_node::get_range(int* left, int* right){
	*left = left_range;
	*right = right_range;
}

int MyRDAG_node::get_left_range(){
	return left_range;
}

int MyRDAG_node::get_right_range(){
	return right_range;
}

bool MyRDAG_node::get_weight(){
	return weight ;
}

MyRDAG_node* MyRDAG_node::get_left_parent(){
	return l_parent;
}

MyRDAG_node* MyRDAG_node::get_right_parent(){
    return r_parent;
}

void MyRDAG_node::set_left_range(int l){
	left_range = l;
}

void MyRDAG_node::set_right_range(int r){
	right_range = r;
}
void MyRDAG_node::set_weight(bool w){
	weight = w;
}
